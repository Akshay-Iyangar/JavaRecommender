<p>Arrays are a powerful and useful concept used in programming. Java SE provides methods to perform some of the most common manipulations related to arrays. For instance, the <a class="SourceLink" target="_blank" href="examples/ArrayCopyDemo.java" onclick="showCode('https://docs.oracle.com/javase/tutorial/displayCode.html', 'examples/ArrayCopyDemo.java'); return false;"><code>ArrayCopyDemo</code></a> example uses the <code>arraycopy</code> method of the <code>System</code> class instead of manually iterating through the elements of the source array and placing each one into the destination array. This is performed behind the scenes, enabling the developer to use just one line of code to call the method.</p> 
<p>For your convenience, Java SE provides several methods for performing array manipulations (common tasks, such as copying, sorting and searching arrays) in the <a class="APILink" target="_blank" href="https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html"><code>java.util.Arrays</code></a> class. For instance, the previous example can be modified to use the <code>copyOfRange</code> method of the <code>java.util.Arrays</code> class, as you can see in the <a class="SourceLink" target="_blank" href="examples/ArrayCopyOfDemo.java" onclick="showCode('https://docs.oracle.com/javase/tutorial/displayCode.html', 'examples/ArrayCopyOfDemo.java'); return false;"><code>ArrayCopyOfDemo</code></a> example. The difference is that using the <code>copyOfRange</code> method does not require you to create the destination array before calling the method, because the destination array is returned by the method:</p> 
<div class="codeblock"> 
 <pre>

class ArrayCopyOfDemo {
    public static void main(String[] args) {
        
        char[] copyFrom = {'d', 'e', 'c', 'a', 'f', 'f', 'e',
            'i', 'n', 'a', 't', 'e', 'd'};
            
        char[] copyTo = java.util.Arrays.copyOfRange(copyFrom, 2, 9);
        
        System.out.println(new String(copyTo));
    }
}
</pre> 
</div> 
<p>As you can see, the output from this program is the same (<code>caffein</code>), although it requires fewer lines of code. Note that the second parameter of the <code>copyOfRange</code> method is the initial index of the range to be copied, inclusively, while the third parameter is the final index of the range to be copied, <em>exclusively</em>. In this example, the range to be copied does not include the array element at index 9 (which contains the character <code>a</code>).</p> 
<p>Some other useful operations provided by methods in the <code>java.util.Arrays</code> class, are:</p> 
<ul> 
 <li>Searching an array for a specific value to get the index at which it is placed (the <code>binarySearch</code> method).</li> 
 <li>Comparing two arrays to determine if they are equal or not (the <code>equals</code> method).</li> 
 <li>Filling an array to place a specific value at each index (the <code>fill</code> method).</li> 
 <li>Sorting an array into ascending order. This can be done either sequentially, using the <code>sort</code> method, or concurrently, using the <code>parallelSort</code> method introduced in Java SE 8. Parallel sorting of large arrays on multiprocessor systems is faster than sequential array sorting.</li> 
</ul>
