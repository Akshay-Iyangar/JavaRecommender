<p>You can use the <a class="APILink" target="_blank" href="https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html"><code>java.text.DecimalFormat</code> </a> class to control the display of leading and trailing zeros, prefixes and suffixes, grouping (thousands) separators, and the decimal separator. <code>DecimalFormat</code> offers a great deal of flexibility in the formatting of numbers, but it can make your code more complex.</p> 
<p>The example that follows creates a <code>DecimalFormat</code> object, <code>myFormatter</code>, by passing a pattern string to the <code>DecimalFormat</code> constructor. The <code>format()</code> method, which <code>DecimalFormat</code> inherits from <code>NumberFormat</code>, is then invoked by <code>myFormatter</code>Â—it accepts a <code>double</code> value as an argument and returns the formatted number in a string:</p> 
<p>Here is a sample program that illustrates the use of <code>DecimalFormat</code>:</p> 
<div class="codeblock"> 
 <pre>

import java.text.*;

public class DecimalFormatDemo {

   static public void customFormat(String pattern, double value ) {
      DecimalFormat myFormatter = new DecimalFormat(pattern);
      String output = myFormatter.format(value);
      System.out.println(value + "  " + pattern + "  " + output);
   }

   static public void main(String[] args) {

      customFormat("###,###.###", 123456.789);
      customFormat("###.##", 123456.789);
      customFormat("000000.000", 123.78);
      customFormat("$###,###.###", 12345.67);  
   }
}

</pre> 
</div> 
<p>The output is:</p> 
<div class="codeblock"> 
 <pre>
123456.789  ###,###.###  123,456.789
123456.789  ###.##  123456.79
123.78  000000.000  000123.780
12345.67  $###,###.###  $12,345.67
</pre> 
</div> 
<p>The following table explains each line of output.</p> 
<table width="100%" border="1" cellpadding="4" cellspacing="3" summary="DecimalFormatDemo.java output"> 
 <caption style="font-weight: bold"> 
  <code>DecimalFormat.java</code> Output 
 </caption> 
 <tbody> 
  <tr> 
   <th id="h101">Value</th> 
   <th id="h102">Pattern</th> 
   <th id="h103">Output</th> 
   <th id="h104">Explanation</th> 
  </tr> 
  <tr> 
   <td headers="h101">123456.789</td> 
   <td headers="h102">###,###.###</td> 
   <td headers="h103">123,456.789</td> 
   <td headers="h104">The pound sign (#) denotes a digit, the comma is a placeholder for the grouping separator, and the period is a placeholder for the decimal separator.</td> 
  </tr> 
  <tr> 
   <td headers="h101">123456.789</td> 
   <td headers="h102">###.##</td> 
   <td headers="h103">123456.79</td> 
   <td headers="h104">The <code>value</code> has three digits to the right of the decimal point, but the <code>pattern</code> has only two. The <code>format</code> method handles this by rounding up.</td> 
  </tr> 
  <tr> 
   <td headers="h101">123.78</td> 
   <td headers="h102">000000.000</td> 
   <td headers="h103">000123.780</td> 
   <td headers="h104">The <code>pattern</code> specifies leading and trailing zeros, because the 0 character is used instead of the pound sign (#).</td> 
  </tr> 
  <tr> 
   <td headers="h101">12345.67</td> 
   <td headers="h102">$###,###.###</td> 
   <td headers="h103">$12,345.67</td> 
   <td headers="h104">The first character in the <code>pattern</code> is the dollar sign ($). Note that it immediately precedes the leftmost digit in the formatted <code>output</code>.</td> 
  </tr> 
 </tbody> 
</table>
