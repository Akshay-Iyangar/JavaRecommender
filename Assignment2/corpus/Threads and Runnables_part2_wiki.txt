<p>A <code>Runnable</code> process block is a simple class that implements a <code>run()</code> method. Within the <code>run()</code> method is the actual task that needs to be executed by a running thread. By implementing a class with the <a rel="nofollow" class="external text" href="http://download.oracle.com/javase/1.5.0/docs/api/java/lang/Runnable.html"><code>Runnable</code></a> interface, we ensure that the class holds a <code>run()</code> method. Consider the following program:</p> 
<table style="padding:2px; margin:2px;"> 
 <tbody> 
  <tr valign="top"> 
   <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60" /></td> 
   <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-1"><b>Code listing 1: A runnable process</b></span> 
    <div class="mw-highlight mw-content-ltr" dir="ltr"> 
     <pre>
<span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunnableProcess</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">time</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Random</span> <span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>

    <span class="kd">public</span> <span class="nf">RunnableProcess</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">time</span> <span class="o">=</span> <span class="n">rand</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">999</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s is sleeping for %d \n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">);</span>
            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">);</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s is done.\n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre> 
    </div> </td> 
  </tr> 
 </tbody> 
</table> 
<p>In the above code, we create a class called <code>RunnableProcess</code> and implement the <code>Runnable</code> interface to ensure that we have a <code>run()</code> method in the class declaration.</p> 
<table style="padding:2px; margin:2px;"> 
 <tbody> 
  <tr valign="top"> 
   <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128" /></td> 
   <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 1.1: Implementing the <code>Runnable</code> interface</b> 
    <div class="mw-highlight mw-content-ltr" dir="ltr"> 
     <pre>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunnableProcess</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre> 
    </div> </td> 
  </tr> 
 </tbody> 
</table> 
<p>We then declare the rest of the logic for the class. For the constructor, we take a <code>String</code> parameter that would serve as the name of the class. Then, we initialize the class member variable <code>time</code> with a random number between <code>0</code> and <code>999</code>. To ensure the initialization of a random number, we use the <code>Random</code> class in the <code>java.util</code> package.</p> 
<table style="padding:2px; margin:2px;"> 
 <tbody> 
  <tr valign="top"> 
   <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128" /></td> 
   <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 1.2: Including ability to generate random integers between <code>0</code> and <code>999</code></b> 
    <div class="mw-highlight mw-content-ltr" dir="ltr"> 
     <pre>
<span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
<span class="o">...</span>
<span class="kd">private</span> <span class="n">Random</span> <span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
<span class="o">...</span>
<span class="k">this</span><span class="o">.</span><span class="na">time</span> <span class="o">=</span> <span class="n">rand</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">999</span><span class="o">);</span>
</pre> 
    </div> </td> 
  </tr> 
 </tbody> 
</table> 
<p>The actual task that would be executed per this runnable block is presented within the <code>run()</code> method. To keep safe from exceptions occurring because of the concurrent programming, we wrap the code within this method with a <code>try..catch</code> block. The executing task actually consists of just three statements. The first outputs the provided name for the Runnable process, and the last reports that the thread has executed. Perhaps the most intriguing part of the code is the second statement: <code>Thread.sleep(...)</code>.</p> 
<table style="padding:2px; margin:2px;"> 
 <tbody> 
  <tr valign="top"> 
   <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128" /></td> 
   <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 1.3: The actual runnable process task</b> 
    <div class="mw-highlight mw-content-ltr" dir="ltr"> 
     <pre>
<span class="o">...</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s is sleeping for %d \n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">);</span>
<span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">time</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%s is done \n"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
<span class="o">...</span>
</pre> 
    </div> </td> 
  </tr> 
 </tbody> 
</table> 
<p>This statement allows the thread executing the current runnable block to halt its execution for the given amount of time. This time is presented in milliseconds. But for our convenience, this time would be the random number generated in the constructor and can be anywhere between <code>0</code> and <code>999</code> milliseconds. We will explore this in a later section. Creating a <code>Runnable</code> process block is just the beginning. No code is actually executed. To do so, we would require the creation of threads that would then individually execute this task.</p>
