<div id="PageContent"> 
 <!-- Comparing Strings and Portions of Strings --> 
 <p>The <code>String</code> class has a number of methods for comparing strings and portions of strings. The following table lists these methods.</p> 
 <table width="100%" border="1" cellpadding="4" cellspacing="3" summary="This table lists methods for comparing strings"> 
  <caption style="font-weight: bold">
    Methods for Comparing Strings 
  </caption> 
  <tbody> 
   <tr> 
    <th id="h1">Method</th> 
    <th id="h2" width="50%">Description</th> 
   </tr> 
   <tr> 
    <td headers="h1"><code>boolean endsWith(String suffix)<br> boolean startsWith(String prefix)</br></code></td> 
    <td headers="h2">Returns <code>true</code> if this string ends with or begins with the substring specified as an argument to the method.</td> 
   </tr> 
   <tr> 
    <td headers="h1"><code>boolean startsWith(String prefix, int offset)</code></td> 
    <td headers="h2">Considers the string beginning at the index <code>offset</code>, and returns <code>true</code> if it begins with the substring specified as an argument.</td> 
   </tr> 
   <tr> 
    <td headers="h1"><code>int compareTo(String anotherString)</code></td> 
    <td headers="h2">Compares two strings lexicographically. Returns an integer indicating whether this string is greater than (result is &gt; 0), equal to (result is = 0), or less than (result is &lt; 0) the argument.</td> 
   </tr> 
   <tr> 
    <td headers="h1"><code>int compareToIgnoreCase(String str)</code></td> 
    <td headers="h2">Compares two strings lexicographically, ignoring differences in case. Returns an integer indicating whether this string is greater than (result is &gt; 0), equal to (result is = 0), or less than (result is &lt; 0) the argument.</td> 
   </tr> 
   <tr> 
    <td headers="h1"><code>boolean equals(Object anObject)</code></td> 
    <td headers="h2">Returns <code>true</code> if and only if the argument is a <code>String</code> object that represents the same sequence of characters as this object.</td> 
   </tr> 
   <tr> 
    <td headers="h1"><code>boolean equalsIgnoreCase(String anotherString)</code></td> 
    <td headers="h2">Returns <code>true</code> if and only if the argument is a <code>String</code> object that represents the same sequence of characters as this object, ignoring differences in case.</td> 
   </tr> 
   <tr> 
    <td headers="h1"><code>boolean regionMatches(int toffset, String other, int ooffset, int len)</code></td> 
    <td headers="h2">Tests whether the specified region of this string matches the specified region of the String argument. <p>Region is of length <code>len</code> and begins at the index <code>toffset</code> for this string and <code>ooffset</code> for the other string.</p> </td> 
   </tr> 
   <tr> 
    <td headers="h1"><code>boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)</code></td> 
    <td headers="h2">Tests whether the specified region of this string matches the specified region of the String argument. <p>Region is of length <code>len</code> and begins at the index <code>toffset</code> for this string and <code>ooffset</code> for the other string.</p> <p>The boolean argument indicates whether case should be ignored; if true, case is ignored when comparing characters.</p> </td> 
   </tr> 
   <tr> 
    <td headers="h1"><code>boolean matches(String regex)</code></td> 
    <td headers="h2">Tests whether this string matches the specified regular expression. Regular expressions are discussed in the lesson titled "Regular Expressions."</td> 
   </tr> 
  </tbody> 
 </table> 
 <p>The following program, <code>RegionMatchesDemo</code>, uses the <code>regionMatches</code> method to search for a string within another string:</p> 
 <div class="codeblock"> 
  <pre>

public class RegionMatchesDemo {
    public static void main(String[] args) {
        String searchMe = "Green Eggs and Ham";
        String findMe = "Eggs";
        int searchMeLength = searchMe.length();
        int findMeLength = findMe.length();
        boolean foundIt = false;
        for (int i = 0; 
             i &lt;= (searchMeLength - findMeLength);
             i++) {
           if (searchMe.regionMatches(i, findMe, 0, findMeLength)) {
              foundIt = true;
              System.out.println(searchMe.substring(i, i + findMeLength));
              break;
           }
        }
        if (!foundIt)
            System.out.println("No match found.");
    }
}
</pre> 
 </div> 
 <p>The output from this program is <code>Eggs</code>.</p> 
 <p>The program steps through the string referred to by <code>searchMe</code> one character at a time. For each character, the program calls the regionMatches method to determine whether the substring beginning with the current character matches the string the program is looking for.</p> 
</div>
