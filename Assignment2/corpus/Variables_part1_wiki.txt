<p>Java is considered as a <b>strongly typed</b> programming language. Thus all variables in the Java programming language ought to have a particular <b>data type</b>. This is either declared or inferred and the Java language only allows programs to run if they adhere to type constraints.</p> 
<p>If you present a numeric type with data that is not numeric, say textual content, then such declarations would violate Javaâ€™s type system. This gives Java the ability of <b>type safety</b>. Java checks if an expression or data is encountered with an incorrect type or none at all. It then automatically flags this occurrence as an error at compile time. Most type-related errors are caught by the Java compiler, hence making a program more secure and safe once compiled completely and successfully. Some languages (such as C) define an interpretation of such a statement and use that interpretation without any warning; others (such as PL/I) define a conversion for almost all such statements and perform the conversion to complete the assignment. Some type errors can still occur at runtime because Java supports a cast operation which is a way of changing the type of one expression to another. However, Java performs run time type checking when doing such casts, so an incorrect type cast will cause a runtime exception rather than succeeding silently and allowing data corruption.</p> 
<p>On the other hand, Java is also known as a <b>hybrid language</b>. While supporting <a href="/wiki/Object_Oriented_Programming" title="Object Oriented Programming">object oriented programming</a> (OOP), Java is not a pure OO language like <a href="/wiki/Programming:Smalltalk" title="Programming:Smalltalk" class="mw-redirect">Smalltalk</a> or <a href="/wiki/Ruby_Programming" title="Ruby Programming">Ruby</a>. Instead, Java offers both object types and <a href="/wiki/Java_Programming/Primitive_Types" title="Java Programming/Primitive Types">primitive types</a>. Primitive types are used for boolean, character, and numeric values and operations. This allows relatively good performance when manipulating numeric data, at the expense of flexibility. For example, you cannot subclass the primitive types and add new operations to them.</p>
