<p>In Java, there are several existing methods that already sort objects from any class like <code>Collections.sort(List&lt;T&gt; list)</code>. However, Java needs to know the comparison rules between two objects. So when you define a new class and want the objects of your class to be sortable, you have to implement the <code>Comparable</code> and redefine the <code>compareTo(Object obj)</code> method.</p> 
<dl> 
 <dt> 
  <code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code> compareTo(T o)&nbsp; 
 </dt> 
 <dd>
   Compares two objects and return an integer: 
 </dd> 
</dl> 
<ul> 
 <li>A negative integer means that the current object is before the parameter object in the natural ordering.</li> 
 <li>Zero means that the current object and the parameter object are equal.</li> 
 <li>A positive integer means that the current object is after the parameter object in the natural ordering.</li> 
</ul> 
<p>Let's say that the name is more important than the address and the description is ignored.</p> 
<table style="padding:2px; margin:2px;"> 
 <tbody> 
  <tr valign="top"> 
   <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60" /></td> 
   <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-6"><b>Code listing 5.6: SortableCustomer.java</b></span> 
    <div class="mw-highlight mw-content-ltr" dir="ltr"> 
     <pre>
<span class="lineno"> 1 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SortableCustomer</span> <span class="kd">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">SortableCustomer</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="lineno"> 2 </span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
<span class="lineno"> 3 </span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">address</span><span class="o">;</span>
<span class="lineno"> 4 </span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">description</span><span class="o">;</span>
<span class="lineno"> 5 </span>    <span class="c1">// ...</span>
<span class="lineno"> 6 </span><span class="hll">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="n">SortableCustomer</span> <span class="n">anotherCustomer</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno"> 7 </span><span class="hll">        <span class="k">if</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">anotherCustomer</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno"> 8 </span><span class="hll">            <span class="k">return</span> <span class="n">address</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">anotherCustomer</span><span class="o">.</span><span class="na">getAddress</span><span class="o">();</span>
</span><span class="lineno"> 9 </span><span class="hll">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="lineno">10 </span><span class="hll">            <span class="k">return</span> <span class="n">name</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">anotherCustomer</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
</span><span class="lineno">11 </span><span class="hll">        <span class="o">}</span>
</span><span class="lineno">12 </span><span class="hll">    <span class="o">}</span>
</span><span class="lineno">13 </span>
<span class="lineno">14 </span><span class="o">}</span>
</pre> 
    </div> </td> 
  </tr> 
 </tbody> 
</table> 
<p>Objects that implement this interface can be used as keys in a sorted map or elements in a sorted set, without the need to specify a comparator.</p> 
<p>The natural ordering for a class C is said to be consistent with equals if and only if <code>e1.compareTo((Object) e2) == 0</code> has the same boolean value as <code>e1.equals((Object) e2)</code> for every e1 and e2 of class C. Note that null is not an instance of any class, and <code>e.compareTo(null)</code> should throw a NullPointerException even though <code>e.equals(null)</code> returns false.</p> 
<p>It is strongly recommended (though not required) that natural orderings be consistent with equals. This is because sorted sets (and sorted maps) without explicit comparators behave "strangely" when they are used with elements (or keys) whose natural ordering is inconsistent with equals. In particular, such a sorted set (or sorted map) violates the general contract for set (or map), which is defined in terms of the equals method.</p>
