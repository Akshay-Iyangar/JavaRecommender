<p><span id="displaytitle" title=""></span></p> 
<table style="width:100%; border:solid 1px #71c837; background:#c6e9af; color:#2d5016;" class="noprint"> 
 <tbody> 
  <tr> 
   <td style="text-align:left; width:33%; font-size:90%;"><img alt="" src="//upload.wikimedia.org/wikibooks/en/thumb/d/df/Navigation_Left_Arrow.svg/18px-Navigation_Left_Arrow.svg.png" width="18" height="14" srcset="//upload.wikimedia.org/wikibooks/en/thumb/d/df/Navigation_Left_Arrow.svg/27px-Navigation_Left_Arrow.svg.png 1.5x, //upload.wikimedia.org/wikibooks/en/thumb/d/df/Navigation_Left_Arrow.svg/36px-Navigation_Left_Arrow.svg.png 2x" data-file-width="165" data-file-height="130"> <a href="/wiki/Java_Programming/Reflection/Graphics_and_Media" title="Java Programming/Reflection/Graphics and Media" class="mw-redirect">Graphics and Media</a></img></td> 
   <td style="text-align:center; width:34%;"><a href="/wiki/Java_Programming/Reflection" title="Java Programming/Reflection">Java Programming/Reflection</a><br> <b>Overview</b></br></td> 
   <td style="text-align:right; width:33%; font-size:90%;"><a href="/wiki/Java_Programming/Reflection/Dynamic_Class_Loading" title="Java Programming/Reflection/Dynamic Class Loading">Dynamic Class Loading</a> <img alt="" src="//upload.wikimedia.org/wikibooks/en/thumb/e/ea/Navigation_Right_Arrow.svg/18px-Navigation_Right_Arrow.svg.png" width="18" height="14" srcset="//upload.wikimedia.org/wikibooks/en/thumb/e/ea/Navigation_Right_Arrow.svg/27px-Navigation_Right_Arrow.svg.png 1.5x, //upload.wikimedia.org/wikibooks/en/thumb/e/ea/Navigation_Right_Arrow.svg/36px-Navigation_Right_Arrow.svg.png 2x" data-file-width="165" data-file-height="130" /></td> 
  </tr> 
 </tbody> 
</table> 
<p>Reflection is the mechanism by which Java exposes the features of a class during runtime, allowing Java programs to enumerate and access a class' methods, fields, and constructors as objects. In other words, there are object-based <i>mirrors</i> that reflect the Java object model, and you can use these objects to access an object's features using runtime API constructs instead of compile-time language constructs. Each object instance has a <code lang="Java" xml:lang="Java">getClass()</code> method, inherited from <code><a href="/w/index.php?title=Category:Java_Programming/API/java.lang&amp;action=edit&amp;redlink=1" class="new" title="Category:Java Programming/API/java.lang (does not exist)">java.lang</a>.<a href="/wiki/Java_Programming/API/java.lang.Object" title="Java Programming/API/java.lang.Object">Object</a></code>, which returns an object with the runtime representation of that object's class; this object is an instance of the <code><a href="/w/index.php?title=Category:Java_Programming/API/java.lang&amp;action=edit&amp;redlink=1" class="new" title="Category:Java Programming/API/java.lang (does not exist)">java.lang</a>.<a href="/wiki/Java_Programming/API/java.lang.Class" title="Java Programming/API/java.lang.Class">Class</a></code>, which in turn has methods that return the fields, methods, constructors, superclass, and other properties of that class. You can use these reflection objects to access fields, invoke methods, or instantiate instances, all without having compile-time dependencies on those features. The Java runtime provides the corresponding classes for reflection. Most of the Java classes that support reflection are in the <code lang="Java" xml:lang="Java">java.lang.reflect package</code>. Reflection is most useful for performing dynamic operations with Java â€” operations that are not hard-coded into a source program, but that are determined at run time. One of the most important aspects of reflection is <a href="/wiki/Java_Programming/Reflection/Dynamic_Class_Loading" title="Java Programming/Reflection/Dynamic Class Loading">dynamic class loading</a>.</p>
