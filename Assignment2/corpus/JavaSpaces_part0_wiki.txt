<p><span id="displaytitle" title=""></span></p> 
<table style="width:100%; border:solid 1px #71c837; background:#c6e9af; color:#2d5016;" class="noprint"> 
 <tbody> 
  <tr> 
   <td style="text-align:left; width:33%; font-size:90%;"><img alt="" src="//upload.wikimedia.org/wikibooks/en/thumb/d/df/Navigation_Left_Arrow.svg/18px-Navigation_Left_Arrow.svg.png" width="18" height="14" srcset="//upload.wikimedia.org/wikibooks/en/thumb/d/df/Navigation_Left_Arrow.svg/27px-Navigation_Left_Arrow.svg.png 1.5x, //upload.wikimedia.org/wikibooks/en/thumb/d/df/Navigation_Left_Arrow.svg/36px-Navigation_Left_Arrow.svg.png 2x" data-file-width="165" data-file-height="130"> <a href="/wiki/Java_Programming/EJB" title="Java Programming/EJB">EJB</a></img></td> 
   <td style="text-align:center; width:34%;"><a href="/wiki/Java_Programming" title="Java Programming">Java Programming</a><br> <b>JavaSpaces</b></br></td> 
   <td style="text-align:right; width:33%; font-size:90%;"><a href="/wiki/Java_Programming/Annotations" title="Java Programming/Annotations">Annotations</a> <img alt="" src="//upload.wikimedia.org/wikibooks/en/thumb/e/ea/Navigation_Right_Arrow.svg/18px-Navigation_Right_Arrow.svg.png" width="18" height="14" srcset="//upload.wikimedia.org/wikibooks/en/thumb/e/ea/Navigation_Right_Arrow.svg/27px-Navigation_Right_Arrow.svg.png 1.5x, //upload.wikimedia.org/wikibooks/en/thumb/e/ea/Navigation_Right_Arrow.svg/36px-Navigation_Right_Arrow.svg.png 2x" data-file-width="165" data-file-height="130" /></td> 
  </tr> 
 </tbody> 
</table> 
<p><br> After J2EE, Sun had a vision about the next step of network computing: in a network environment, there would be many independent services and consumers. That is <b>JavaSpaces</b>. JavaSpaces would allow these services/consumers to interact dynamically with each other in a robust way. It can be viewed as an object repository that provides a distributed persistent object exchange mechanism (persistent can be in memory or disk) for Java objects. It can be used to store the system state and implement distributed algorithms. In a JavaSpace, all communication partners (peers) communicate by sharing state. It is an implementation of the <a href="//en.wikipedia.org/wiki/Tuple_spaces" class="extiw" title="w:Tuple spaces">Tuple spaces</a> idea.</br></p> 
<p>JavaSpaces is used when someone wants to achieve scalability and availability and at the same time reducing the complexity of the overall system.</p> 
<p>Processes perform simple operations to write new objects into a <i>JavaSpace</i>, take objects from a <i>JavaSpace</i>, or read (make a copy of) objects from the <i>JavaSpace</i>.</p> 
<p>In conventional applications, objects are assembled from the database before presenting to the end user. In JavaSpace applications, we keep the ready made "end user" objects and store them in the JavaSpace. In JavaSpace applications the services are decoupled from each other; they communicate through objects that they write and read/take from the JavaSpace. Services search for objects that they want to take or read from the Space by using template object.</p>
