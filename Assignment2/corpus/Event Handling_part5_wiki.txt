<p>There's one more thing to notice about the Event Model and that is what is <i>not</i> in the Model. The Event Model is designed to allow implementations a large degree of freedom in the implementation choices made, which means that the Event Model can serve as the basis for a very wide range of specific, purpose-built event handling systems.</p> 
<p>Aside from naming conventions and some base classes and interfaces, the Event Model specifies the following:</p> 
<ul> 
 <li>It must be possible to register and deregister listeners.</li> 
 <li>An event source must publish events by calling the correct notification method on all registered listeners.</li> 
 <li>A call to an event notification method is a normal, synchronous Java call and the method must be executed by the same thread that called it.</li> 
</ul> 
<p>But the Event Model doesn't specify <i>how</i> any of this must be done. There are no rules regarding which classes exactly must be event sources, nor about how they must keep track of registered event listeners. So one class might publish its own events, or be responsible for publishing the events that relate to an entire collection of objects (like an entire component). And an event source might allow listeners to be deregistered at any time (even in the middle of handling an event) or might limit this to certain times (which is relevant to multithreading).</p> 
<p>Also, the Event Model doesn't specify how it must be embedded within any program. So, while the model specifies that a call to an event handling method is a synchronous call, the Model does not prescribe that the event handling method cannot hand off tasks to another thread or that the entire event model implementation must run in the main thread of the application. In fact, the Java Platform's standard user interface framework (<a href="/wiki/Java_Programming/Swing" title="Java Programming/Swing" class="mw-redirect">Swing</a>) includes an event handling implementation that runs as a complete subsystem of a desktop application, in its own thread.</p>
