<div id="PageContent"> 
 <p> There may be times when you want to restrict the types that can be used as type arguments in a parameterized type. For example, a method that operates on numbers might only want to accept instances of <code>Number</code> or its subclasses. This is what <i>bounded type parameters</i> are for.</p> 
 <p> To declare a bounded type parameter, list the type parameter's name, followed by the <code>extends</code> keyword, followed by its <i>upper bound</i>, which in this example is <code>Number</code>. Note that, in this context, <code>extends</code> is used in a general sense to mean either "extends" (as in classes) or "implements" (as in interfaces).</p> 
 <div class="codeblock"> 
  <pre>
public class Box&lt;T&gt; {

    private T t;          

    public void set(T t) {
        this.t = t;
    }

    public T get() {
        return t;
    }

    public &lt;U <b>extends Number</b>&gt; void inspect(U u){
        System.out.println("T: " + t.getClass().getName());
        System.out.println("U: " + u.getClass().getName());
    }

    public static void main(String[] args) {
        Box&lt;Integer&gt; integerBox = new Box&lt;Integer&gt;();
        integerBox.set(new Integer(10));
        integerBox.inspect("some text"); // <b>error: this is still String!</b>
    }
}
</pre> 
 </div> 
 <p>By modifying our generic method to include this bounded type parameter, compilation will now fail, since our invocation of <code>inspect</code> still includes a <code>String</code>:</p> 
 <div class="codeblock"> 
  <pre>
Box.java:21: &lt;U&gt;inspect(U) in Box&lt;java.lang.Integer&gt; cannot
  be applied to (java.lang.String)
                        integerBox.inspect("10");
                                  ^
1 error
</pre> 
 </div> 
 <p> In addition to limiting the types you can use to instantiate a generic type, bounded type parameters allow you to invoke methods defined in the bounds:</p> 
 <div class="codeblock"> 
  <pre>
public class NaturalNumber&lt;T extends Integer&gt; {

    private T n;

    public NaturalNumber(T n)  { this.n = n; }

    public boolean isEven() {
        return <strong>n.intValue()</strong> % 2 == 0;
    }

    // ...
}
</pre> 
 </div> 
 <p> The <tt>isEven</tt> method invokes the <tt>intValue</tt> method defined in the <tt>Integer</tt> class through <tt>n</tt>.</p> 
</div>
