<div id="PageContent"> 
 <p>When working with numbers, most of the time you use the primitive types in your code. For example:</p> 
 <div class="codeblock"> 
  <pre>
int i = 500;
float gpa = 3.65f;
byte mask = 0xff;
</pre> 
 </div> 
 <p>There are, however, reasons to use objects in place of primitives, and the Java platform provides <i>wrapper</i> classes for each of the primitive data types. These classes "wrap" the primitive in an object. Often, the wrapping is done by the compilerÂ—if you use a primitive where an object is expected, the compiler <i>boxes</i> the primitive in its wrapper class for you. Similarly, if you use a number object when a primitive is expected, the compiler <i>unboxes</i> the object for you. For more information, see <a class="TutorialLink" target="_top" href="autoboxing.html">Autoboxing and Unboxing</a></p> 
 <p>All of the numeric wrapper classes are subclasses of the abstract class <code>Number</code>: 
  <!-- figure --></p> 
 <center> 
  <img src="https://docs.oracle.com/javase/tutorial/figures/java/objects-numberHierarchy.gif" width="327" height="149" align="bottom" alt="The class hierarchy of Number."> </img>
 </center> 
 <div class="note"> 
  <hr> 
   <strong>Note:</strong>&nbsp;There are four other subclasses of 
   <code>Number</code> that are not discussed here. 
   <code>BigDecimal</code> and 
   <code>BigInteger</code> are used for high-precision calculations. 
   <code>AtomicInteger</code> and 
   <code>AtomicLong</code> are used for multi-threaded applications. 
   <hr> 
   </hr>
  </hr>
 </div> 
 <p>There are three reasons that you might use a <code>Number</code> object rather than a primitive:</p> 
 <ol> 
  <li>As an argument of a method that expects an object (often used when manipulating collections of numbers).</li> 
  <li>To use constants defined by the class, such as <code>MIN_VALUE</code> and <code>MAX_VALUE</code>, that provide the upper and lower bounds of the data type.</li> 
  <li>To use class methods for converting values to and from other primitive types, for converting to and from strings, and for converting between number systems (decimal, octal, hexadecimal, binary).</li> 
 </ol> 
 <p>The following table lists the instance methods that all the subclasses of the <code>Number</code> class implement.</p> 
 <table border="1" cellpadding="4" cellspacing="3" summary="This table lists methods implemented by all subclasses of Number"> 
  <caption style="font-weight: bold">
    Methods Implemented by all Subclasses of Number 
  </caption> 
  <tbody> 
   <tr> 
    <th id="h1">Method</th> 
    <th id="h2">Description</th> 
   </tr> 
   <tr> 
    <td headers="h1"><code>byte byteValue()<br> short shortValue()<br> int intValue()<br> long longValue()<br> float floatValue()<br> double doubleValue()</br></br></br></br></br></code></td> 
    <td headers="h2">Converts the value of this <code>Number</code> object to the primitive data type returned.</td> 
   </tr> 
   <tr> 
    <td headers="h1"><code>int compareTo(Byte anotherByte)<br> int compareTo(Double anotherDouble)<br> int compareTo(Float anotherFloat)<br> int compareTo(Integer anotherInteger)<br> int compareTo(Long anotherLong)<br> int compareTo(Short anotherShort)</br></br></br></br></br></code></td> 
    <td headers="h2">Compares this <code>Number</code> object to the argument.</td> 
   </tr> 
   <tr> 
    <td headers="h1"><code>boolean equals(Object obj)</code></td> 
    <td headers="h2">Determines whether this number object is equal to the argument.<br> The methods return <code>true</code> if the argument is not <code>null</code> and is an object of the same type and with the same numeric value.<br> There are some extra requirements for <code>Double</code> and <code>Float</code> objects that are described in the Java API documentation.</br></br></td> 
   </tr> 
  </tbody> 
 </table> 
 <p>Each <code>Number</code> class contains other methods that are useful for converting numbers to and from strings and for converting between number systems. The following table lists these methods in the <code>Integer</code> class. Methods for the other <code>Number</code> subclasses are similar:</p> 
 <table border="1" cellpadding="4" cellspacing="3" summary="This table lists conversion methods for the Integer class"> 
  <caption style="font-weight: bold">
    Conversion Methods, 
   <code>Integer</code> Class 
  </caption> 
  <tbody> 
   <tr> 
    <th id="h101">Method</th> 
    <th id="h102">Description</th> 
   </tr> 
   <tr> 
    <td headers="h101"><code>static Integer decode(String s)</code></td> 
    <td headers="h102">Decodes a string into an integer. Can accept string representations of decimal, octal, or hexadecimal numbers as input.</td> 
   </tr> 
   <tr> 
    <td headers="h101"><code>static int parseInt(String s)</code></td> 
    <td headers="h102">Returns an integer (decimal only).</td> 
   </tr> 
   <tr> 
    <td headers="h101"><code>static int parseInt(String s, int radix)</code></td> 
    <td headers="h102">Returns an integer, given a string representation of decimal, binary, octal, or hexadecimal (<code>radix</code> equals 10, 2, 8, or 16 respectively) numbers as input.</td> 
   </tr> 
   <tr> 
    <td headers="h101"><code>String toString()</code></td> 
    <td headers="h102">Returns a <code>String</code> object representing the value of this <code>Integer</code>.</td> 
   </tr> 
   <tr> 
    <td headers="h101"><code>static String toString(int i)</code></td> 
    <td headers="h102">Returns a <code>String</code> object representing the specified integer.</td> 
   </tr> 
   <tr> 
    <td headers="h101"><code>static Integer valueOf(int i)</code></td> 
    <td headers="h102">Returns an <code>Integer</code> object holding the value of the specified primitive.</td> 
   </tr> 
   <tr> 
    <td headers="h101"><code>static Integer valueOf(String s)</code></td> 
    <td headers="h102">Returns an <code>Integer</code> object holding the value of the specified string representation.</td> 
   </tr> 
   <tr> 
    <td headers="h101"><code>static Integer valueOf(String s, int radix)</code></td> 
    <td headers="h102">Returns an <code>Integer</code> object holding the integer value of the specified string representation, parsed with the value of radix. For example, if s = "333" and radix = 8, the method returns the base-ten integer equivalent of the octal number 333.</td> 
   </tr> 
  </tbody> 
 </table> 
</div>
