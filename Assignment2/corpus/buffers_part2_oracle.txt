<p>The <code>StringBuilder</code> class, like the <code>String</code> class, has a <code>length()</code> method that returns the length of the character sequence in the builder.</p> 
<p>Unlike strings, every string builder also has a <i>capacity</i>, the number of character spaces that have been allocated. The capacity, which is returned by the <code>capacity()</code> method, is always greater than or equal to the length (usually greater than) and will automatically expand as necessary to accommodate additions to the string builder.</p> 
<table width="100%" border="1" cellpadding="4" cellspacing="3" summary="This table lists the constructors for the StringBuilder class"> 
 <caption style="font-weight: bold"> 
  <code>StringBuilder</code> Constructors 
 </caption> 
 <tbody> 
  <tr> 
   <th id="h1">Constructor</th> 
   <th id="h2" width="50%">Description</th> 
  </tr> 
  <tr> 
   <td headers="h1"><code>StringBuilder()</code></td> 
   <td headers="h2">Creates an empty string builder with a capacity of 16 (16 empty elements).</td> 
  </tr> 
  <tr> 
   <td headers="h1"><code>StringBuilder(CharSequence cs)</code></td> 
   <td headers="h2">Constructs a string builder containing the same characters as the specified <code>CharSequence</code>, plus an extra 16 empty elements trailing the <code>CharSequence</code>.</td> 
  </tr> 
  <tr> 
   <td headers="h1"><code>StringBuilder(int initCapacity)</code></td> 
   <td headers="h2">Creates an empty string builder with the specified initial capacity.</td> 
  </tr> 
  <tr> 
   <td headers="h1"><code>StringBuilder(String s)</code></td> 
   <td headers="h2">Creates a string builder whose value is initialized by the specified string, plus an extra 16 empty elements trailing the string.</td> 
  </tr> 
 </tbody> 
</table> 
<p>For example, the following code</p> 
<div class="codeblock"> 
 <pre>
// creates empty builder, capacity 16
StringBuilder sb = new StringBuilder();
// adds 9 character string at beginning
sb.append("Greetings");
</pre> 
</div> 
<p>will produce a string builder with a length of 9 and a capacity of 16: </p> 
<center> 
 <img src="https://docs.oracle.com/javase/tutorial/figures/java/objects-stringBuffer.gif" width="461" height="90" align="bottom" alt="A string builder's length is the number of characters it contains; a string builder's capacity is the number of character spaces that have been allocated."> </img>
</center> 
<p>The <code>StringBuilder</code> class has some methods related to length and capacity that the <code>String</code> class does not have:</p> 
<table width="100%" border="1" cellpadding="4" cellspacing="3" summary="This table lists length and capacity methods"> 
 <caption style="font-weight: bold">
   Length and Capacity Methods 
 </caption> 
 <tbody> 
  <tr> 
   <th id="h101">Method</th> 
   <th id="h102" width="50%">Description</th> 
  </tr> 
  <tr> 
   <td headers="h101"><code>void setLength(int newLength)</code></td> 
   <td headers="h102">Sets the length of the character sequence. If <code>newLength</code> is less than <code>length()</code>, the last characters in the character sequence are truncated. If <code>newLength</code> is greater than <code>length()</code>, null characters are added at the end of the character sequence.</td> 
  </tr> 
  <tr> 
   <td headers="h101"><code>void ensureCapacity(int minCapacity)</code></td> 
   <td headers="h102">Ensures that the capacity is at least equal to the specified minimum.</td> 
  </tr> 
 </tbody> 
</table> 
<p>A number of operations (for example, <code>append()</code>, <code>insert()</code>, or <code>setLength()</code>) can increase the length of the character sequence in the string builder so that the resultant <code>length()</code> would be greater than the current <code>capacity()</code>. When this happens, the capacity is automatically increased.</p>
