<p>Literals of types <code>char</code> and <code>String</code> may contain any Unicode (UTF-16) characters. If your editor and file system allow it, you can use such characters directly in your code. If not, you can use a "Unicode escape" such as <code>'\u0108'</code> (capital C with circumflex), or <code>"S\u00ED Se\u00F1or"</code> (Sí Señor in Spanish). Always use 'single quotes' for <code>char</code> literals and "double quotes" for <code>String</code> literals. Unicode escape sequences may be used elsewhere in a program (such as in field names, for example), not just in <code>char</code> or <code>String</code> literals.</p> 
<p>The Java programming language also supports a few special escape sequences for <code>char</code> and <code>String</code> literals: <code>\b</code> (backspace), <code>\t</code> (tab), <code>\n</code> (line feed), <code>\f</code> (form feed), <code>\r</code> (carriage return), <code>\"</code> (double quote), <code>\'</code> (single quote), and <code>\\</code> (backslash).</p> 
<p>There's also a special <code>null</code> literal that can be used as a value for any reference type. <code>null</code> may be assigned to any variable, except variables of primitive types. There's little you can do with a <code>null</code> value beyond testing for its presence. Therefore, <code>null</code> is often used in programs as a marker to indicate that some object is unavailable.</p> 
<p>Finally, there's also a special kind of literal called a <em>class literal</em>, formed by taking a type name and appending "<code>.class"</code>; for example, <code>String.class</code>. This refers to the object (of type <code>Class</code>) that represents the type itself.</p>
