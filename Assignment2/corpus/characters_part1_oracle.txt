<div id="PageContent"> 
 <!-- Characters --> 
 <p>Most of the time, if you are using a single character value, you will use the primitive <code>char</code> type. For example:</p> 
 <div class="codeblock"> 
  <pre>
char ch = 'a'; 
// Unicode for uppercase Greek omega character
char uniChar = '\u03A9';
// an array of chars
char[] charArray = { 'a', 'b', 'c', 'd', 'e' };
</pre> 
 </div> 
 <p>There are times, however, when you need to use a char as an objectfor example, as a method argument where an object is expected. The Java programming language provides a <i>wrapper</i> class that "wraps" the <code>char</code> in a <code>Character</code> object for this purpose. An object of type <code>Character</code> contains a single field, whose type is <code>char</code>. This <a class="APILink" target="_blank" href="https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html">Character</a> class also offers a number of useful class (i.e., static) methods for manipulating characters.</p> 
 <p>You can create a <code>Character</code> object with the <code>Character</code> constructor:</p> 
 <div class="codeblock"> 
  <pre>
Character ch = new Character('a');
</pre> 
 </div> 
 <p>The Java compiler will also create a <code>Character</code> object for you under some circumstances. For example, if you pass a primitive <code>char</code> into a method that expects an object, the compiler automatically converts the <code>char</code> to a <code>Character</code> for you. This feature is called <em>autoboxing</em>or <em>unboxing</em>, if the conversion goes the other way. For more information on autoboxing and unboxing, see <a class="TutorialLink" target="_top" href="autoboxing.html">Autoboxing and Unboxing</a>.</p> 
 <div class="note"> 
  <hr> 
   <strong>Note:</strong>&nbsp;The 
   <code>Character</code> class is immutable, so that once it is created, a 
   <code>Character</code> object cannot be changed. 
   <hr> 
   </hr>
  </hr>
 </div> 
 <p>The following table lists some of the most useful methods in the <code>Character</code> class, but is not exhaustive. For a complete listing of all methods in this class (there are more than 50), refer to the <a class="APILink" target="_blank" href="https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html">java.lang.Character</a> API specification.</p> 
 <table width="100%" border="1" cellpadding="4" cellspacing="3" summary="This table lists Character methods"> 
  <caption style="font-weight: bold">
    Useful Methods in the 
   <code>Character</code> Class 
  </caption> 
  <tbody> 
   <tr> 
    <th id="h1" width="30%">Method</th> 
    <th id="h2">Description</th> 
   </tr> 
   <tr> 
    <td headers="h1"><code>boolean isLetter(char ch)<br> boolean isDigit(char ch)</br></code></td> 
    <td headers="h2">Determines whether the specified char value is a letter or a digit, respectively.</td> 
   </tr> 
   <tr> 
    <td headers="h1"><code>boolean isWhitespace(char ch)</code></td> 
    <td headers="h2">Determines whether the specified char value is white space.</td> 
   </tr> 
   <tr> 
    <td headers="h1"><code>boolean isUpperCase(char ch)<br> boolean isLowerCase(char ch)</br></code></td> 
    <td headers="h2">Determines whether the specified char value is uppercase or lowercase, respectively.</td> 
   </tr> 
   <tr> 
    <td headers="h1"><code>char toUpperCase(char ch)<br> char toLowerCase(char ch)</br></code></td> 
    <td headers="h2">Returns the uppercase or lowercase form of the specified char value.</td> 
   </tr> 
   <tr> 
    <td headers="h1"><code>toString(char ch)</code></td> 
    <td headers="h2">Returns a <code>String</code> object representing the specified character value  that is, a one-character string.</td> 
   </tr> 
  </tbody> 
 </table> 
</div>
