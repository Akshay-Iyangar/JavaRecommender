<p>The most direct way to create a string is to write:</p> 
<div class="codeblock"> 
 <pre>
String greeting = "Hello world!";
</pre> 
</div> 
<p>In this case, "Hello world!" is a <i>string literal</i>a series of characters in your code that is enclosed in double quotes. Whenever it encounters a string literal in your code, the compiler creates a <code>String</code> object with its valuein this case, <code>Hello world!</code>.</p> 
<p>As with any other object, you can create <code>String</code> objects by using the <code>new</code> keyword and a constructor. The <code>String</code> class has thirteen constructors that allow you to provide the initial value of the string using different sources, such as an array of characters:</p> 
<div class="codeblock"> 
 <pre>
char[] helloArray = { 'h', 'e', 'l', 'l', 'o', '.' };
String helloString = new String(helloArray);
System.out.println(helloString);
</pre> 
</div> 
<p>The last line of this code snippet displays <code>hello</code>.</p> 
<div class="note"> 
 <hr> 
  <strong>Note:</strong>&nbsp;The 
  <code>String</code> class is immutable, so that once it is created a 
  <code>String</code> object cannot be changed. The 
  <code>String</code> class has a number of methods, some of which will be discussed below, that appear to modify strings. Since strings are immutable, what these methods really do is create and return a new string that contains the result of the operation. 
  <hr> 
  </hr>
 </hr>
</div>
