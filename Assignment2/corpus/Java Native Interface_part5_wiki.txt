<p>Native data types can be mapped to/from Java data types. For compound types such as objects, arrays and strings the native code must explicitly convert the data by calling methods in the <code>JNIEnv</code>. The following table shows the mapping of types between Java (JNI) and native code.</p> 
<p>In addition, the signature <code>"L fully-qualified-class&nbsp;;"</code> would mean the class uniquely specified by that name; e.g., the signature <code>"Ljava/lang/String;"</code> refers to the class <code>java.lang.String</code>. Also, prefixing <code>[</code> to the signature makes the array of that type; for example, <code>[I</code> means the int array type. Finally, a <code>void</code> signature uses the <code>V</code> code. Here, these types are interchangeable. You can use <code>jint</code> where you normally use an <code>int</code>, and vice-versa, without any typecasting required.</p> 
<p>However, mapping between Java Strings and arrays to native strings and arrays is different. If you use a <code>jstring</code> in where a <code>char *</code> would be, your code could crash the JVM.</p> 
<div class="mw-highlight mw-content-ltr" dir="ltr"> 
 <pre>
<span class="n">JNIEXPORT</span> <span class="kt">void</span> <span class="n">JNICALL</span> <span class="nf">Java_ClassName_MethodName</span>
        <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jstring</span> <span class="n">javaString</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// printf("%s", javaString);        // INCORRECT: Could crash VM!</span>

    <span class="c1">// Correct way: Create and release native string from Java string</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">nativeString</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaString</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">nativeString</span><span class="p">);</span>
    <span class="p">(</span><span class="o">*</span><span class="n">env</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">ReleaseStringUTFChars</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">javaString</span><span class="p">,</span> <span class="n">nativeString</span><span class="p">);</span>
<span class="p">}</span>
</pre> 
</div> 
<p>The encoding used for the <code>NewStringUTF</code>, <code>GetStringUTFLength</code>, <code>GetStringUTFChars</code>, <code>ReleaseStringUTFChars</code>, <code>GetStringUTFRegion</code> functions is not standard UTF-8, but modified UTF-8. The null character (U+0000) and codepoints greater than or equal to U+10000 are encoded differently in modified UTF-8. Many programs actually use these functions incorrectly and treat the UTF-8 strings returned or passed into the functions as standard UTF-8 strings instead of modified UTF-8 strings. Programs should use the <code>NewString</code>, <code>GetStringLength</code>, <code>GetStringChars</code>, <code>ReleaseStringChars</code>, <code>GetStringRegion</code>, <code>GetStringCritical</code>, and <code>ReleaseStringCritical</code> functions, which use UTF-16LE encoding on little-endian architectures and UTF-16BE on big-endian architectures, and then use a UTF-16 to standard UTF-8 conversion routine.</p> 
<p>The code is similar with Java arrays, as illustrated in the example below that takes the sum of all the elements in an array.</p> 
<div class="mw-highlight mw-content-ltr" dir="ltr"> 
 <pre>
<span class="n">JNIEXPORT</span> <span class="n">jint</span> <span class="n">JNICALL</span> <span class="nf">Java_IntArray_sumArray</span>
        <span class="p">(</span><span class="n">JNIEnv</span> <span class="o">*</span><span class="n">env</span><span class="p">,</span> <span class="n">jobject</span> <span class="n">obj</span><span class="p">,</span> <span class="n">jintArray</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">jint</span> <span class="n">buf</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
    <span class="n">jint</span> <span class="n">i</span><span class="p">,</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="c1">// This line is necessary, since Java arrays are not guaranteed</span>
    <span class="c1">// to have a continuous memory layout like C arrays.</span>
    <span class="n">env</span><span class="o">-&gt;</span><span class="n">GetIntArrayRegion</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sum</span> <span class="o">+=</span> <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
<span class="p">}</span>
</pre> 
</div> 
<p>Of course, there is much more to it than this.</p>
