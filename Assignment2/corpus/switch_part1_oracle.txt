<div id="PageContent"> 
 <p>Unlike <code>if-then</code> and <code>if-then-else</code> statements, the <code>switch</code> statement can have a number of possible execution paths. A <code>switch</code> works with the <code>byte</code>, <code>short</code>, <code>char</code>, and <code>int</code> primitive data types. It also works with <i>enumerated types</i> (discussed in <a class="TutorialLink" target="_top" href="../javaOO/enum.html">Enum Types</a>), the <a class="APILink" target="_blank" href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"><code>String</code></a> class, and a few special classes that wrap certain primitive types: <a class="APILink" target="_blank" href="https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html"><code>Character</code></a>, <a class="APILink" target="_blank" href="https://docs.oracle.com/javase/8/docs/api/java/lang/Byte.html"><code>Byte</code></a>, <a class="APILink" target="_blank" href="https://docs.oracle.com/javase/8/docs/api/java/lang/Short.html"><code>Short</code></a>, and <a class="APILink" target="_blank" href="https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html"><code>Integer</code></a> (discussed in <a class="TutorialLink" target="_top" href="../data/index.html">Numbers and Strings</a>).</p> 
 <p>The following code example, <a class="SourceLink" target="_blank" href="examples/SwitchDemo.java" onclick="showCode('https://docs.oracle.com/javase/tutorial/displayCode.html', 'examples/SwitchDemo.java'); return false;"><code>SwitchDemo</code></a>, declares an <code>int</code> named <code>month</code> whose value represents a month. The code displays the name of the month, based on the value of <code>month</code>, using the <code>switch</code> statement.</p> 
 <div class="codeblock"> 
  <pre>

public class SwitchDemo {
    public static void main(String[] args) {

        int month = 8;
        String monthString;
        switch (month) {
            case 1:  monthString = "January";
                     break;
            case 2:  monthString = "February";
                     break;
            case 3:  monthString = "March";
                     break;
            case 4:  monthString = "April";
                     break;
            case 5:  monthString = "May";
                     break;
            case 6:  monthString = "June";
                     break;
            case 7:  monthString = "July";
                     break;
            case 8:  monthString = "August";
                     break;
            case 9:  monthString = "September";
                     break;
            case 10: monthString = "October";
                     break;
            case 11: monthString = "November";
                     break;
            case 12: monthString = "December";
                     break;
            default: monthString = "Invalid month";
                     break;
        }
        System.out.println(monthString);
    }
}
</pre> 
 </div> 
 <p>In this case, <code>August</code> is printed to standard output.</p> 
 <p>The body of a <code>switch</code> statement is known as a <i>switch block</i>. A statement in the <code>switch</code> block can be labeled with one or more <code>case</code> or <code>default</code> labels. The <code>switch</code> statement evaluates its expression, then executes all statements that follow the matching <code>case</code> label.</p> 
 <p>You could also display the name of the month with <code>if-then-else</code> statements:</p> 
 <div class="codeblock"> 
  <pre>
int month = 8;
if (month == 1) {
    System.out.println("January");
} else if (month == 2) {
    System.out.println("February");
}
...  // and so on
</pre> 
 </div> 
 <p>Deciding whether to use <code>if-then-else</code> statements or a <code>switch</code> statement is based on readability and the expression that the statement is testing. An <code>if-then-else</code> statement can test expressions based on ranges of values or conditions, whereas a <code>switch</code> statement tests expressions based only on a single integer, enumerated value, or <code>String</code> object.</p> 
 <p>Another point of interest is the <code>break</code> statement. Each <code>break</code> statement terminates the enclosing <code>switch</code> statement. Control flow continues with the first statement following the <code>switch</code> block. The <code>break</code> statements are necessary because without them, statements in <code>switch</code> blocks <em>fall through</em>: All statements after the matching <code>case</code> label are executed in sequence, regardless of the expression of subsequent <code>case</code> labels, until a <code>break</code> statement is encountered. The program <a class="SourceLink" target="_blank" href="examples/SwitchDemoFallThrough.java" onclick="showCode('https://docs.oracle.com/javase/tutorial/displayCode.html', 'examples/SwitchDemoFallThrough.java'); return false;"><code>SwitchDemoFallThrough</code></a> shows statements in a <code>switch</code> block that fall through. The program displays the month corresponding to the integer <code>month</code> and the months that follow in the year:</p> 
 <div class="codeblock"> 
  <pre>

public class SwitchDemoFallThrough {

    public static void main(String[] args) {
        java.util.ArrayList&lt;String&gt; futureMonths =
            new java.util.ArrayList&lt;String&gt;();

        int month = 8;

        switch (month) {
            case 1:  futureMonths.add("January");
            case 2:  futureMonths.add("February");
            case 3:  futureMonths.add("March");
            case 4:  futureMonths.add("April");
            case 5:  futureMonths.add("May");
            case 6:  futureMonths.add("June");
            case 7:  futureMonths.add("July");
            case 8:  futureMonths.add("August");
            case 9:  futureMonths.add("September");
            case 10: futureMonths.add("October");
            case 11: futureMonths.add("November");
            case 12: futureMonths.add("December");
                     break;
            default: break;
        }

        if (futureMonths.isEmpty()) {
            System.out.println("Invalid month number");
        } else {
            for (String monthName : futureMonths) {
               System.out.println(monthName);
            }
        }
    }
}
</pre> 
 </div> 
 <p>This is the output from the code:</p> 
 <div class="codeblock"> 
  <pre>
August
September
October
November
December
</pre> 
 </div> 
 <p>Technically, the final <code>break</code> is not required because flow falls out of the <code>switch</code> statement. Using a <code>break</code> is recommended so that modifying the code is easier and less error prone. The <code>default</code> section handles all values that are not explicitly handled by one of the <code>case</code> sections.</p> 
 <p>The following code example, <a class="SourceLink" target="_blank" href="examples/SwitchDemo2.java" onclick="showCode('https://docs.oracle.com/javase/tutorial/displayCode.html', 'examples/SwitchDemo2.java'); return false;"><code>SwitchDemo2</code></a>, shows how a statement can have multiple <code>case</code> labels. The code example calculates the number of days in a particular month:</p> 
 <div class="codeblock"> 
  <pre>

class SwitchDemo2 {
    public static void main(String[] args) {

        int month = 2;
        int year = 2000;
        int numDays = 0;

        switch (month) {
            case 1: case 3: case 5:
            case 7: case 8: case 10:
            case 12:
                numDays = 31;
                break;
            case 4: case 6:
            case 9: case 11:
                numDays = 30;
                break;
            case 2:
                if (((year % 4 == 0) &amp;&amp; 
                     !(year % 100 == 0))
                     || (year % 400 == 0))
                    numDays = 29;
                else
                    numDays = 28;
                break;
            default:
                System.out.println("Invalid month.");
                break;
        }
        System.out.println("Number of Days = "
                           + numDays);
    }
}
</pre> 
 </div> 
 <p>This is the output from the code:</p> 
 <div class="codeblock"> 
  <pre>
Number of Days = 29
</pre> 
 </div> 
</div>
