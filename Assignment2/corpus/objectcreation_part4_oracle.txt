<p>Here's the code for the <tt>Point</tt> class:</p> 
<div class="codeblock"> 
 <pre>
public class Point {
    public int x = 0;
    public int y = 0;<b>
    //constructor
    public Point(int a, int b) {
        x = a;
        y = b;
    }</b>
}
</pre> 
</div> 
<p>This class contains a single constructor. You can recognize a constructor because its declaration uses the same name as the class and it has no return type. The constructor in the <tt>Point</tt> class takes two integer arguments, as declared by the code <tt>(int a, int b)</tt>. The following statement provides 23 and 94 as values for those arguments:</p> 
<div class="codeblock"> 
 <pre>
Point originOne = new Point(23, 94);
</pre> 
</div> 
<p>The result of executing this statement can be illustrated in the next figure:</p> 
<center> 
 <img src="https://docs.oracle.com/javase/tutorial/figures/java/objects-oneRef.gif" width="323" height="196" align="bottom" alt="originOne now points to a Point object."> </img>
</center> 
<p>Here's the code for the <tt>Rectangle</tt> class, which contains four constructors:</p> 
<div class="codeblock"> 
 <pre>
public class Rectangle {
    public int width = 0;
    public int height = 0;
    public Point origin;

    // four constructors
    public Rectangle() {
        origin = new Point(0, 0);
    }
    public Rectangle(Point p) {
        origin = p;
    }
    public Rectangle(int w, int h) {
        origin = new Point(0, 0);
        width = w;
        height = h;
    }
    public Rectangle(Point p, int w, int h) {
        origin = p;
        width = w;
        height = h;
    }

    // a method for moving the rectangle
    public void move(int x, int y) {
        origin.x = x;
        origin.y = y;
    }

    // a method for computing the area of the rectangle
    public int getArea() {
        return width * height;
    }
}

</pre> 
</div> 
<p>Each constructor lets you provide initial values for the rectangle's origin, width, and height, using both primitive and reference types. If a class has multiple constructors, they must have different signatures. The Java compiler differentiates the constructors based on the number and the type of the arguments. When the Java compiler encounters the following code, it knows to call the constructor in the <tt>Rectangle</tt> class that requires a <tt>Point</tt> argument followed by two integer arguments:</p> 
<div class="codeblock"> 
 <pre> 
Rectangle rectOne = new Rectangle(originOne, 100, 200);
</pre> 
</div> 
<p>This calls one of <code>Rectangle</code>'s constructors that initializes <code>origin</code> to <code>originOne</code>. Also, the constructor sets <code>width</code> to 100 and <code>height</code> to 200. Now there are two references to the same <tt>Point object</tt>Â—an object can have multiple references to it, as shown in the next figure:</p> 
<center> 
 <img src="https://docs.oracle.com/javase/tutorial/figures/java/objects-multipleRefs.gif" width="396" height="350" align="bottom" alt="Now the rectangle's origin variable also points to the Point."> </img>
</center> 
<p>The following line of code calls the <code>Rectangle</code> constructor that requires two integer arguments, which provide the initial values for <tt>width</tt> and <tt>height</tt>. If you inspect the code within the constructor, you will see that it creates a new <tt>Point</tt> object whose <tt>x</tt> and <tt>y</tt> values are initialized to 0:</p> 
<div class="codeblock"> 
 <pre>
Rectangle rectTwo = new Rectangle(50, 100);
</pre> 
</div> 
<p>The <tt>Rectangle</tt> constructor used in the following statement doesn't take any arguments, so it's called a <em>no-argument constructor</em>:</p> 
<div class="codeblock"> 
 <pre>
Rectangle rect = new Rectangle();
</pre> 
</div> 
<p>All classes have at least one constructor. If a class does not explicitly declare any, the Java compiler automatically provides a no-argument constructor, called the <em>default constructor</em>. This default constructor calls the class parent's no-argument constructor, or the <code>Object</code> constructor if the class has no other parent. If the parent has no constructor (<code>Object</code> does have one), the compiler will reject the program.</p>
