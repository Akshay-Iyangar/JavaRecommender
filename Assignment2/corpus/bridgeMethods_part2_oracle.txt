<p> When compiling a class or interface that extends a parameterized class or implements a parameterized interface, the compiler may need to create a synthetic method, called a <em>bridge method</em>, as part of the type erasure process. You normally don't need to worry about bridge methods, but you might be puzzled if one appears in a stack trace.</p> 
<p> After type erasure, the <tt>Node</tt> and <tt>MyNode</tt> classes become:</p> 
<div class="codeblock"> 
 <pre>
public class Node {

    public Object data;

    public Node(Object data) { this.data = data; }

    public void setData(Object data) {
        System.out.println("Node.setData");
        this.data = data;
    }
}

public class MyNode extends Node {

    public MyNode(Integer data) { super(data); }

    public void setData(Integer data) {
        System.out.println("MyNode.setData");
        super.setData(data);
    }
}
</pre> 
</div> 
<p> After type erasure, the method signatures do not match. The <tt>Node</tt> method becomes <tt>setData(Object)</tt> and the <tt>MyNode</tt> method becomes <tt>setData(Integer)</tt>. Therefore, the <tt>MyNode</tt> <tt>setData</tt> method does not override the <tt>Node</tt> <tt>setData</tt> method.</p> 
<p> To solve this problem and preserve the <a class="TutorialLink" target="_top" href="../IandI/polymorphism.html">polymorphism</a> of generic types after type erasure, a Java compiler generates a bridge method to ensure that subtyping works as expected. For the <tt>MyNode</tt> class, the compiler generates the following bridge method for <tt>setData</tt>:</p> 
<div class="codeblock"> 
 <pre>
class MyNode extends Node {

    <strong>// Bridge method generated by the compiler
    //
    public void setData(Object data) {
        setData((Integer) data);
    }</strong>

    public void setData(Integer data) {
        System.out.println("MyNode.setData");
        super.setData(data);
    }

    // ...
}
</pre> 
</div> 
<p> As you can see, the bridge method, which has the same method signature as the <tt>Node</tt> class's <tt>setData</tt> method after type erasure, delegates to the original <tt>setData</tt> method.</p>
