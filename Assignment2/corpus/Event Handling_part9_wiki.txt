<p>So, with our listener interface defined, we need one or more implementations (actual listener classes). At the very least we need one that will keep a running sum of the numbers read. We can add as many as we like, of course. But let's stick with just one for now. Obviously, this class must implement our <code>NumberReadListener</code> interface. Keeping a running summation is a matter of adding numbers to a field as the events arrive. And we wanted to report on the sum when the end of the stream is reached; since we know when that happens (i.e. the <code>numberStreamTerminated</code> method is called), a simple <code>println</code> statement will do:</p> 
<table style="padding:2px; margin:2px;"> 
 <tbody> 
  <tr valign="top"> 
   <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60" /></td> 
   <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Code listing 1.3: NumberReadListenerImpl.</b> 
    <div class="mw-highlight mw-content-ltr" dir="ltr"> 
     <pre>
<span class="kn">package</span> <span class="nn">org.wikibooks.en.javaprogramming.example</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NumberReadListenerImpl</span> <span class="kd">implements</span> <span class="n">NumberReadListener</span> <span class="o">{</span>
   
    <span class="n">Double</span> <span class="n">totalSoFar</span> <span class="o">=</span> <span class="mi">0</span><span class="n">D</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">numberRead</span><span class="o">(</span><span class="n">NumberReadEvent</span> <span class="n">numberReadEvent</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">totalSoFar</span> <span class="o">+=</span> <span class="n">numberReadEvent</span><span class="o">.</span><span class="na">getNumber</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">numberStreamTerminated</span><span class="o">(</span><span class="n">NumberReadEvent</span> <span class="n">numberReadEvent</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Sum of the number stream: "</span> <span class="o">+</span> <span class="n">totalSoFar</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre> 
    </div> </td> 
  </tr> 
 </tbody> 
</table> 
<p>So, is this code any good? No. It's yucky and terrible and most of all not thread safe. But it will do for our example.</p>
